<style lang="less" scoped>
  .container {
    padding-bottom: 120rpx;
    .uploadImg {
      display: flex;
      align-items: center;
      justify-content: center;
      height: 340rpx;
      background-color: #EEEEEE;
      .bg {
        text-align: center;
        .img {
          width: 240rpx;
          height: 240rpx;
        }
        .detail {
          font-size: 28rpx;
          color: #BFC0C7;
        }
      }
      .bgImg {
        width: 100%;
        height: 100%;
      }
    }
    .list-wrap {
      padding-left: 20rpx;
      background-color: #FFFFFF;
      .list {
        display: flex;
        align-items: center;
        padding-top: 20rpx;
        padding-bottom: 20rpx;
        padding-right: 20rpx;
        border-bottom: 1px solid #F6F6F6;
        font-size: 28rpx;
        &:last-child {
          border-bottom: none;
        }
        .icon {
          margin-right: 20rpx;
          color: #F24C4C;
        }
        .option {
          color: #AFAFAF;
        }
        .icon-right {
          color: #B5B5B5;
        }
        .flex1 {
          flex: 1;
        }
        .detail {
          width: 16px;
        }
      }
    }
    .announce {
      height: 180rpx;
      margin-top: 20rpx;
      margin-bottom: 20rpx;
      padding-left: 20rpx;
      background-color: #FFFFFF;
      textarea {
        padding: 5rpx;
        height: 140rpx;
      }
      .detail {
        display: flex;
        height: 100%;
        padding-top: 20rpx;
        padding-bottom: 20rpx;
        padding-right: 20rpx;
        font-size: 28rpx;
        .daka {
          margin-right: 20rpx;
          padding-top: 6rpx;
          color: #F24C4C;
        }
        .option {
          color: #AFAFAF;
        }
        .flex1 {
          flex: 1;
        }
      }
    }
    .signup {
      padding-left: 20rpx;
      background-color: #FFFFFF;
      .title {
        padding-top: 20rpx;
        padding-bottom: 20rpx;
        border-bottom: 1px solid #F4F4F4;
        font-size: 28rpx;
        color: #6E6E6E;
      }
      .characteristic {
        padding-top: 20rpx;
        padding-bottom: 20rpx;
        border-bottom: 1px solid #F4F4F4;
        font-size: 28rpx;
        &:last-child {
          border-bottom: none;
        }
        .head {
          margin-bottom: 20rpx;
          color: #A8A8A8;
        }
        .data-wrap {
          display: inline-flex;
          flex-wrap: wrap;
          .data-list {
            width: 158rpx;
            margin-right: 10rpx;
            margin-bottom: 10rpx;
            padding-top: 10rpx;
            padding-bottom: 10rpx;
            text-align: center;
            border: 1px solid #C0C0C0;
            border-radius: 5px;
            color: #5B5B5B;
          }
        }
      }
    }
  }
</style>

<template>
  <view class="container">
    <view class="uploadImg" @tap="uploadImage">
      <view class="bg" wx:if="{{!imgSrc}}">
        <image mode="aspectFill" src="../../images/upload_img.png" mode="aspectFill" class="img"></image>
        <view class="detail">上传需求封面图尺寸比例750*340</view>
      </view>
      <image mode="aspectFill" src="{{imgSrc}}" class="bgImg" mode="aspectFill" wx:else></image>
    </view>
    <view class="list-wrap">
      <view class="list">
        <view class="daka icon-zhuti icon"></view>
        <view class="option flex1">
          <input placeholder="通告主题" value="{{performName}}" data-id="3" bindinput="bindPickerChange" placeholder-style="color:#AFAFAF" maxlength="30"/>
        </view>
      </view>
      <view class="list">
        <view class="daka icon-locationfill icon"></view>
        <view class="option flex1">
           <picker mode="region" bindchange="bindRegionChange" value="{{performAddr}}">
            <view class="picker">
              {{performAddr ? performAddr : '工作城市'}}
            </view>
          </picker>
        </view>
        <view class="daka icon-right"></view>
      </view>
      <view class="list">
        <view class="daka detail icon"></view>
        <view class="option flex1">
          <input placeholder="详细地址" placeholder-style="color:#AFAFAF" bindchange="bindPickerChange" data-id="5" valeu="{{performAddrDetaild ? performAddrDetaild : '详细地址'}}" maxlength="30"/>
        </view>
        <view class="daka icon-right"></view>
      </view>
      <view class="list">
        <view class="daka icon-timefill icon"></view>
        <view class="option flex1">
          <picker mode="date" value="{{startTime}}" start="{{currentDate}}" data-id="0" bindchange="bindPickerChange">
            <view class="picker">
               {{startTime ? startTime : '开始时间'}}
            </view>
          </picker>
        </view>
        <view class="daka icon-right"></view>
      </view>
      <view class="list">
        <view class="daka icon-timefill icon"></view>
        <view class="option flex1">
          <picker mode="date" value="{{endTime}}" start="{{currentDate}}" data-id="1" bindchange="bindPickerChange">
            <view class="picker">
               {{endTime ? endTime : '结束时间'}}
            </view>
          </picker>
        </view>
        <view class="daka icon-right"></view>
      </view>
      <view class="list">
        <view class="daka icon-leixing icon"></view>
        <view class="option flex1">
          <picker bindchange="bindPickerChange" mode="selector" range-key="title" data-id="2" value="{{type}}" range="{{typeArray}}">
            <view class="picker">
              {{type ? type : '通告类型'}}
            </view>
        </picker>
        </view>
        <view class="daka icon-right"></view>
      </view>
    </view>
    <view class="announce">
      <view class="detail">
        <view class="daka icon-jianjie"></view>
        <view class="option flex1">
          <textarea placeholder-style="color:#AFAFAF" value="{{performContent}}" data-id="4" bindinput="bindPickerChange" placeholder="通告详细说明，如：剧组简介、条件要求、薪资待遇等"/>
        </view>
      </view>
    </view>
    <view class="fixedBtn">
      <view class="fixedBtnGrounp">
        <button class="btn" bindtap="uploadNotice">
          保存
        </button>
      </view>
    </view>
  </view>
</template>
<script>
  import wepy from "wepy";
  import {$post} from "../../mixins/base";
  export default class Notice extends wepy.page {
    config = {
      navigationBarTitleText: '发通告'
    }
    data = {
      performImg: '',
      imgSrc: "",
      performContent: '',
      performName: '',
      performAddr: '',
      performAddrDetaild: '',
      currentDate: new Date,
      startTime: '',
      endTime: "",
      type: null,
      typeArray: ['演员', '歌手'],
      performAddr1:  ''
    }
    methods = {
      uploadImage() {
        var _this = this;
        wx.chooseImage({
          count: 1, // 默认9
          sizeType: ['original', 'compressed'],
          sourceType: ['album', 'camera'],
          success: function (res) {
            const {tempFilePaths} = res;
            _this.imgSrc = tempFilePaths[0];
            _this.$apply();
            wx.showLoading({
              title: '图片上传中...',
              mask: true
            });
            wx.uploadFile({
              url: 'https://www.us800.cn/plupload/upload.jsp', //仅为示例，非真实的接口地址
              filePath: tempFilePaths[0],
              name: 'file',
              success: function(r){
                // var data = res.data
                _this.performImg = r.data.trim();
                _this.$apply();
                wx.hideLoading();
              }
            })
          }
        });
      },
      bindRegionChange(e) {
        const {value} = e.detail;
        this.performAddr = `${value[0]} ${value[1]} ${value[2]}`;
        this.performAddr1 = `${value[0]}${value[1]}${value[2]}`;
        this.$apply();
      },
      bindPickerChange(e) {
        const _this = this;
        const {value} = e.detail;
        const {id} = e.target.dataset;
        const {typeArray} = _this.$data;
        switch (id | 0) {
          case 0:
            _this.startTime = value;
            break;
          case 1:
            _this.endTime = value;
            break;
          case 2:
            _this.type = typeArray[value].title;
            break;
          case 3:
            _this.performName = value;
            break;
          case 4:
            _this.performContent = value;
            break;
          case 5:
            _this.performAddrDetaild = value;
            break;
        }
        _this.$apply();
      },
      uploadNotice() {
        const _this = this;
        const {user} = _this.$parent.globalData;
        const {memberId} = user;
        const {typeArray, type, performName, performImg, startTime, endTime, performAddr, performAddrDetaild, performAddr1, performContent} = this.$data;
        if (!type || !performName || !startTime || !endTime || !performImg || !performAddr || !performContent) return (
          wx.showModal({
            title: '提示',
            content: '请填写完后在提交！所有内容不能为空哦！',
            showCancel: false,
            confirmText: '好的',
            mask: true,
            success: function(res) {
              if (res.confirm) {
                console.log('用户点击确定')
              } else if (res.cancel) {
                console.log('用户点击取消')
              }
            }
          })
        );
        wx.showLoading({
          title: '发布中...',
          mask: true
        });
        wx.request({
          url: 'https://www.us800.cn/wechat!saveBooking.action',
          data: {
            memberId,
            performImg,
            artistTypes: type,
            performName,
            performBeginTime: startTime,
            performEndTime: endTime,
            performAddr1: performAddr,
            performAddr2: `${performAddr1}${performAddrDetaild}`,
            performContent
          },
          method: 'POST',
          header: {
             'content-type': 'application/x-www-form-urlencoded'
          },
          success(res) {
            wx.showToast({
              title: '发布成功',
              icon: 'success',
              duration: 2000
            });
            wepy.navigateTo({url: '/pages/notice/index'})
          }
        })
      }
    }

    onLoad(e) {
      const _this = this;
      //加载一级分类
      _this.$loadTypes();
    }

    //一级分类
    $loadTypes() {
      const _this = this;
      $post('/async!gotNoticeType.action')
      .then(data => {
        _this.typeArray = data;
        _this.$apply();
      })
    }
  }
</script>

