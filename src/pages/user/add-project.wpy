<style lang="less" scoped>
  .container {
    .list-wrap {
      padding-left: 20rpx;
      background-color: #FFFFFF;
      .list {
        display: flex;
        align-items: center;
        padding-top: 20rpx;
        padding-bottom: 20rpx;
        padding-right: 20rpx;
        border-bottom: 1px solid #F6F6F6;
        font-size: 28rpx;
        &:last-child {
          border-bottom: none;
        }
        .icon {
          margin-right: 20rpx;
          color: #F24C4C;
        }
        .option {
          color: #AFAFAF;
        }
        .icon-right {
          color: #B5B5B5;
        }
        .flex1 {
          flex: 1;
        }
        .detail {
          width: 16px;
        }
      }
    }
    .announce {
      height: 180rpx;
      margin-top: 20rpx;
      margin-bottom: 20rpx;
      padding-left: 20rpx;
      background-color: #FFFFFF;
      textarea {
        padding: 5rpx;
        height: 140rpx;
      }
      .detail {
        display: flex;
        height: 100%;
        padding-top: 20rpx;
        padding-bottom: 20rpx;
        padding-right: 20rpx;
        font-size: 28rpx;
        .daka {
          margin-right: 20rpx;
          padding-top: 6rpx;
          color: #F24C4C;
        }
        .option {
          color: #AFAFAF;
        }
        .flex1 {
          flex: 1;
        }
      }
    }
    .signup {
      padding-left: 20rpx;
      background-color: #FFFFFF;
      .title {
        padding-top: 20rpx;
        padding-bottom: 20rpx;
        border-bottom: 1px solid #F4F4F4;
        font-size: 28rpx;
        color: #6E6E6E;
      }
      .characteristic {
        padding-top: 20rpx;
        padding-bottom: 20rpx;
        border-bottom: 1px solid #F4F4F4;
        font-size: 28rpx;
        &:last-child {
          border-bottom: none;
        }
        .head {
          margin-bottom: 20rpx;
          color: #A8A8A8;
        }
        .data-wrap {
          display: inline-flex;
          flex-wrap: wrap;
          .data-list {
            width: 158rpx;
            margin-right: 10rpx;
            margin-bottom: 10rpx;
            padding-top: 10rpx;
            padding-bottom: 10rpx;
            text-align: center;
            border: 1px solid #C0C0C0;
            border-radius: 5px;
            color: #5B5B5B;
          }
        }
      }
    }

  }
</style>

<template>
  <view class="container">
    <form bindsubmit="submit">
      <view class="list-wrap">
        <view class="list">
          <view class="daka icon-zhuti icon"></view>
          <view class="option flex1">
            <input name="name" placeholder="项目名称" placeholder-style="color:#AFAFAF" maxlength="30"/>
          </view>
        </view>
        <view class="list">
          <view class="daka icon-locationfill icon"></view>
          <view class="option flex1">
            <picker mode="region" bindchange="bindRegionChange" value="{{performAddr}}">
              <view class="picker">
                {{performAddr ? performAddr : '工作城市'}}
              </view>
            </picker>
          </view>
          <view class="daka icon-right"></view>
        </view>
        <!-- <view class="list">
          <view class="daka detail icon"></view>
          <view class="option flex1">
            <input placeholder="详细地址" placeholder-style="color:#AFAFAF" bindchange="bindPickerChange" data-id="5" valeu="{{performAddrDetaild ? performAddrDetaild : '详细地址'}}" maxlength="30"/>
          </view>
          <view class="daka icon-right"></view>
        </view> -->
        <view class="list">
          <view class="daka icon-timefill icon"></view>
          <view class="option flex1">
            <picker mode="date" value="{{startTime}}" start="{{currentDate}}" data-id="0" bindchange="bindPickerChange">
              <view class="picker">
                {{startTime ? startTime : '开始时间'}}
              </view>
            </picker>
          </view>
          <view class="daka icon-right"></view>
        </view>
        <view class="list">
          <view class="daka icon-timefill icon"></view>
          <view class="option flex1">
            <picker mode="date" value="{{endTime}}" start="{{currentDate}}" data-id="1" bindchange="bindPickerChange">
              <view class="picker">
                {{endTime ? endTime : '结束时间'}}
              </view>
            </picker>
          </view>
          <view class="daka icon-right"></view>
        </view>
      </view>
      <view class="announce">
        <view class="detail">
          <view class="daka icon-jianjie"></view>
          <view class="option flex1">
            <textarea placeholder-style="color:#AFAFAF" value="{{performContent}}" data-id="4" bindinput="bindPickerChange" placeholder="项目详细说明，如：剧组简介、条件要求、薪资待遇等"/>
          </view>
        </view>
      </view>
       <view class="fixedBtn">
        <view class="fixedBtnGrounp">
          <button class="btn" form-type="submit">
            <text class="daka icon-iconjia"></text>
            确认新建
          </button>
        </view>
      </view>
    </form>
  </view>
</template>
<script>
  import wepy from "wepy";
  import {$post} from "../../mixins/base";
  export default class AddProject extends wepy.page {
    config = {
      navigationBarTitleText: '新建项目'
    }
    data = {
      performContent: '',
      performAddr: '',
      currentDate: new Date,
      startTime: '',
      endTime: "",
      performAddr1:  ''
    }
    methods = {
      bindRegionChange(e) {
        const {value} = e.detail;
        this.performAddr = `${value[0]} ${value[1]} ${value[2]}`;
        this.performAddr1 = `${value[0]}${value[1]}${value[2]}`;
        this.$apply();
      },
      bindPickerChange(e) {
        const {value} = e.detail;
        const {id} = e.target.dataset;
        switch (id | 0) {
          case 0:
            this.startTime = value;
            break;
          case 1:
            this.endTime = value;
            break;
          case 2:
            this.type = value;
            break;
          case 3:
            this.performName = value;
            break;
          case 4:
            this.performContent = value;
            break;
          case 5:
            this.performAddrDetaild = value;
            break;
        }
        this.$apply();
      },
      submit(e) {
        const _this = this;
        const {performContent, performAddr, startTime, endTime} = _this.$data;
        const {name} = e.detail.value;
        const {user} = _this.$parent.globalData;
        const {memberId} = user;
        if (!performContent || !performAddr || !startTime || !endTime || !name) {
          wepy.showModal({
            title: '提示',
            content: '填写完整才能提交哦！',
            showCancel: false
          });
          return false;
        }
        $post('/wechat!saveBooking.action', {
          memberId,
          performName: name,
          performBeginTime: startTime,
          performEndTime: endTime,
          performAddr1: performAddr,
          performContent: performContent
        })
        .then(data => {
          //修改成功提示并且返回上一页
          wepy.showToast({
            title: '保存成功',
            icon: 'success',
            duration: 2000
          });
          setTimeout(wepy.navigateBack, 1000);
        })
        .catch(err => {
          wepy.showToast({
            title: '保存失败',
            image: '/images/error.png',
            duration: 2000
          });
        })
      }
    }
  }
</script>

